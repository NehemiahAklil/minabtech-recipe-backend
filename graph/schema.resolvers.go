package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"
	"errors"
	"fmt"

	"github.com/NehemiahAklil/minabtech-recipe-backend/graph/hasura/actions"
	hasura_models "github.com/NehemiahAklil/minabtech-recipe-backend/graph/hasura/models"
	"github.com/NehemiahAklil/minabtech-recipe-backend/graph/model"
	"github.com/NehemiahAklil/minabtech-recipe-backend/graph/utils/helpers"
)

// Register is the resolver for the Register field.
func (r *mutationResolver) Register(ctx context.Context, input model.NewUser) (*model.User, error) {
	hashedPassword, err := helpers.Hash(*input.Password)
	fmt.Println("THIS IS THE REIGSDK")
	if err != nil {
		return nil, err
	}
	createUserInput := hasura_models.RegisterArgs{
		First_name: *input.FirstName,
		Last_name:  input.LastName,
		Username:   *input.Username,
		Email:      input.Email,
		Password:   hashedPassword,
	}

	result, err := actions.Register(createUserInput)
	if err != nil {
		return nil, err
	}

	user := &model.User{
		ID:        *result.Id,
		FirstName: *result.First_name,
		LastName:  *result.Last_name,
		Username:  result.Username,
		Email:     *result.Email,
	}
	token, err := helpers.CreateToken(*user)
	user.Token = token

	if err != nil {
		return nil, err
	} else {
		return user, nil
	}
}

// Login is the resolver for the Login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.User, error) {
	searchUser := hasura_models.SearchUserArgs{
		LoginText: input.LoginText,
	}

	result, err := actions.SearchUser(searchUser)
	if err != nil {
		return nil, err
	}

	user := &model.User{
		ID:        result.Id,
		FirstName: result.First_name,
		LastName:  result.Last_name,
		Username:  &result.Username,
		Email:     result.Email,
		Password:  result.Password,
	}
	if helpers.Compare(user.Password, input.Password) {
		token, err := helpers.CreateToken(*user)
		if err != nil {
			return nil, err
		}
		user.Token = token
		return user, nil
	} else {
		return nil, errors.New("wrong password or your email/username is wrong")
	}
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
